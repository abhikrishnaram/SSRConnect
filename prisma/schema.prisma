// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mID           String?

  isAdmin      Boolean @default(false)
  isStaff      Boolean @default(false)
  isRegistered Boolean @default(false)
  canLogin     Boolean @default(true)

  Proposal Proposal[]
  Project  Project[]

  team    Team?  @relation("User_lead")
  mentees Team[] @relation("User_mentor")
}

model Team {
  code String @id @unique

  project Project?

  proposals Proposal[]

  mentor   User?   @relation("User_mentor", fields: [mentorId], references: [id])
  mentorId String?

  lead   User?   @relation("User_lead", fields: [leadId], references: [id])
  leadId String? @unique

  members Json
  // members User[] @relation("User_members")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Proposal {
  id                Int           @id @default(autoincrement())
  title             String
  description       String
  content           String
  attachment        String?
  link              String?
  created_at        DateTime      @default(now())
  updated_at        DateTime
  state             PROPSAL_STATE @default(DRAFT)
  remarks           String?
  remark_updated_at DateTime?

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  Team     Team?   @relation(fields: [teamCode], references: [code])
  teamCode String?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  poster      String?
  link        String?
  content     String?
  video       String?
  meta        Json?

  theme   Theme? @relation(fields: [themeId], references: [id])
  themeId Int?

  isPublished Boolean @default(false)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  Team Team   @relation(fields: [code], references: [code])
  code String @unique
}

model Theme {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  Project     Project[]
}

enum PROPSAL_STATE {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}
